import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, roc_auc_score
from sklearn.ensemble import RandomForestClassifier
import category_encoders as ce
import plotly.express as px
import numpy as np

# ==============================
# üõ≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ==============================
st.set_page_config(page_title="üö¢ Titanic Survival Predictor", layout="wide")
st.title('üö¢ Titanic Survival Predictor - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º Titanic')

# ==============================
# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ==============================
df = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

st.subheader("üîç 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10), use_container_width=True)

# ==============================
# üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ==============================
df['Age'].fillna(df['Age'].median(), inplace=True)
df['Fare'].fillna(df['Fare'].median(), inplace=True)
df['Cabin'] = df['Cabin'].notna().astype(int)  # 1 –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—é—Ç–∞, 0 –µ—Å–ª–∏ –Ω–µ—Ç
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# ==============================
# üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# ==============================
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x='Survived', color="Sex", barmode="group", title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É")
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    fig2 = px.histogram(df, x='Pclass', color="Survived", barmode="group", title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å—É")
    st.plotly_chart(fig2, use_container_width=True)

fig3 = px.violin(df, x="Survived", y="Age", color="Survived", box=True, points="all",
                 title="–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ")
st.plotly_chart(fig3, use_container_width=True)

# ==============================
# üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ==============================
X = df.drop(['Survived', 'PassengerId', 'Name', 'Ticket'], axis=1)
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
encoder = ce.TargetEncoder(cols=['Sex', 'Embarked'])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

# ==============================
# üîç –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (GridSearch)
# ==============================
st.subheader("‚öôÔ∏è –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è RandomForest")

param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 5, 10],
    'min_samples_split': [2, 5, 10]
}

grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='accuracy', n_jobs=-1)
grid.fit(X_train_encoded, y_train)

best_model = grid.best_estimator_
st.write(f"**–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:** {grid.best_params_}")

# ==============================
# üìà –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏ AUC
# ==============================
acc_train = accuracy_score(y_train, best_model.predict(X_train_encoded))
acc_test = accuracy_score(y_test, best_model.predict(X_test_encoded))
roc_auc = roc_auc_score(y_test, best_model.predict_proba(X_test_encoded)[:, 1])

st.write(f"**Train Accuracy:** {acc_train:.2f}")
st.write(f"**Test Accuracy:** {acc_test:.2f}")
st.write(f"**ROC-AUC:** {roc_auc:.2f}")

# ==============================
# üéõ –§–æ—Ä–º–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# ==============================
with st.sidebar.form("prediction_form"):
    st.subheader("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–∂–∏–≤–∞–Ω–∏—è")
    pclass_input = st.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()))
    sex_input = st.selectbox("–ü–æ–ª", df['Sex'].unique())
    age_input = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 80, int(df['Age'].median()))
    sibsp_input = st.slider("SibSp (–ë—Ä–∞—Ç—å—è/–°—ë—Å—Ç—Ä—ã)", 0, int(df['SibSp'].max()), 0)
    parch_input = st.slider("Parch (–†–æ–¥–∏—Ç–µ–ª–∏/–î–µ—Ç–∏)", 0, int(df['Parch'].max()), 0)
    fare_input = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", float(df['Fare'].min()), float(df['Fare'].max()), float(df['Fare'].median()))
    embarked_input = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique())
    cabin_input = st.selectbox("–ö–∞—é—Ç–∞ —É–∫–∞–∑–∞–Ω–∞?", [0, 1])

    submit_button = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

if submit_button:
    user_input = pd.DataFrame([{
        'Pclass': pclass_input,
        'Sex': sex_input,
        'Age': age_input,
        'SibSp': sibsp_input,
        'Parch': parch_input,
        'Fare': fare_input,
        'Embarked': embarked_input,
        'Cabin': cabin_input
    }])

    user_encoded = encoder.transform(user_input)
    user_encoded = user_encoded[X_train_encoded.columns]

    prediction = best_model.predict(user_encoded)[0]
    proba = best_model.predict_proba(user_encoded)[0]

    result = "‚úÖ –í—ã–∂–∏–ª" if prediction == 1 else "‚ùå –ù–µ –≤—ã–∂–∏–ª"
    st.sidebar.markdown(f"### –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**")

    proba_df = pd.DataFrame({'–ö–ª–∞—Å—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba})
    st.sidebar.dataframe(proba_df.set_index("–ö–ª–∞—Å—Å"), use_container_width=True)
