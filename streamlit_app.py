import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve
from sklearn.ensemble import RandomForestClassifier
import category_encoders as ce
import plotly.express as px

st.set_page_config(page_title="üì° Telco Customer Churn Predictor", layout="wide")
st.title("üì° Telco Customer Churn Predictor - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
st.write("## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º Telco")

# 1) –ó–∞–≥—Ä—É–∑–∫–∞
df = pd.read_excel("Telco_customer_churn.xlsx")

st.subheader("üîç 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10, random_state=42), use_container_width=True)

# 2) –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞
# Total Charges –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –æ–±—ä–µ–∫—Ç ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É
df["Total Charges"] = pd.to_numeric(df["Total Charges"], errors="coerce")
# –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ Total Charges
df.dropna(subset=["Total Charges"], inplace=True)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
df.drop(columns=["CustomerID"], errors="ignore", inplace=True)

# 3) –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ —Ñ–∏—á–∏
# –¶–µ–ª—å ‚Äî –±–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 0/1
y = df["Churn Value"]

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–û–í–ù–û —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞–µ–º –≤ —Ñ–æ—Ä–º–µ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ)
feature_cols = [
    "Gender",
    "Senior Citizen",
    "Partner",
    "Dependents",
    "Tenure Months",
    "Phone Service",
    "Multiple Lines",
    "Internet Service",
    "Contract",
    "Payment Method",
    "Monthly Charges",
    "Total Charges",
]
X = df[feature_cols].copy()

# 4) –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º Churn Label –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–¥–ø–∏—Å–∏ Yes/No)
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)
with col1:
    fig1 = px.histogram(df, x="Churn Label", color="Gender", barmode="group",
                        title="–û—Ç—Ç–æ–∫ –ø–æ –ø–æ–ª—É")
    st.plotly_chart(fig1, use_container_width=True)
with col2:
    fig2 = px.histogram(df, x="Churn Label", color="Contract", barmode="group",
                        title="–û—Ç—Ç–æ–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
    st.plotly_chart(fig2, use_container_width=True)

fig3 = px.violin(df, x="Churn Label", y="Tenure Months", color="Churn Label",
                 box=True, points="all", title="–û—Ç—Ç–æ–∫ –∏ —Å—Ç–∞–∂ –∫–ª–∏–µ–Ω—Ç–∞ (–º–µ—Å—è—Ü—ã)")
st.plotly_chart(fig3, use_container_width=True)

# 5) Train/Test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.30, stratify=y, random_state=42
)

# 6) –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
cat_cols = X.select_dtypes(include="object").columns.tolist()
encoder = ce.TargetEncoder(cols=cat_cols)
X_train_enc = encoder.fit_transform(X_train, y_train)
X_test_enc = encoder.transform(X_test)

# 7) –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.subheader("‚öôÔ∏è –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è RandomForest")
param_grid = {
    "n_estimators": [100, 200],
    "max_depth": [None, 5, 10],
    "min_samples_split": [2, 5],
    "min_samples_leaf": [1, 2],
}
grid = GridSearchCV(RandomForestClassifier(random_state=42),
                    param_grid, cv=3, scoring="accuracy", n_jobs=-1)
grid.fit(X_train_enc, y_train)

best_model = grid.best_estimator_
st.write(f"**–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:** {grid.best_params_}")

# 8) –ú–µ—Ç—Ä–∏–∫–∏
acc_train = accuracy_score(y_train, best_model.predict(X_train_enc))
acc_test = accuracy_score(y_test, best_model.predict(X_test_enc))
roc_auc = roc_auc_score(y_test, best_model.predict_proba(X_test_enc)[:, 1])

st.write(f"**Train Accuracy:** {acc_train:.2f}")
st.write(f"**Test Accuracy:** {acc_test:.2f}")
st.write(f"**ROC-AUC:** {roc_auc:.2f}")

# ROC-–∫—Ä–∏–≤–∞—è
fpr, tpr, _ = roc_curve(y_test, best_model.predict_proba(X_test_enc)[:, 1])
roc_df = pd.DataFrame({"FPR": fpr, "TPR": tpr})
roc_fig = px.line(roc_df, x="FPR", y="TPR", title=f"ROC-–∫—Ä–∏–≤–∞—è (AUC={roc_auc:.2f})")
roc_fig.add_shape(type="line", line=dict(dash="dash", color="red"), x0=0, x1=1, y0=0, y1=1)
st.plotly_chart(roc_fig, use_container_width=True)

# 9) –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ 1 –≤ 1 –∫–∞–∫ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ)
st.subheader("üîÆ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
with st.form("prediction_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        gender = st.selectbox("Gender", df["Gender"].unique())
        senior = st.selectbox("Senior Citizen", df["Senior Citizen"].unique())
        partner = st.selectbox("Partner", df["Partner"].unique())
        tenure = st.slider("Tenure Months", 0, int(df["Tenure Months"].max()), int(df["Tenure Months"].median()))
    with col2:
        phone = st.selectbox("Phone Service", df["Phone Service"].unique())
        multiple = st.selectbox("Multiple Lines", df["Multiple Lines"].unique())
        internet = st.selectbox("Internet Service", df["Internet Service"].unique())
        contract = st.selectbox("Contract", df["Contract"].unique())
    with col3:
        monthly = st.slider("Monthly Charges", float(df["Monthly Charges"].min()),
                            float(df["Monthly Charges"].max()),
                            float(df["Monthly Charges"].median()))
        total = st.slider("Total Charges", float(df["Total Charges"].min()),
                          float(df["Total Charges"].max()),
                          float(df["Total Charges"].median()))
        payment = st.selectbox("Payment Method", df["Payment Method"].unique())
        dependents = st.selectbox("Dependents", df["Dependents"].unique())

    submit_button = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

if submit_button:
    user_input = pd.DataFrame([{
        "Gender": gender,
        "Senior Citizen": senior,
        "Partner": partner,
        "Dependents": dependents,
        "Tenure Months": tenure,
        "Phone Service": phone,
        "Multiple Lines": multiple,
        "Internet Service": internet,
        "Contract": contract,
        "Payment Method": payment,
        "Monthly Charges": monthly,
        "Total Charges": total,
    }])

    # –¢–æ—á–Ω–æ —Ç–µ –∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –Ω–∞ —Ç—Ä–µ–π–Ω–µ
    user_encoded = encoder.transform(user_input)

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫/–Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
    user_encoded = user_encoded[X_train_enc.columns]

    prediction = best_model.predict(user_encoded)[0]
    proba = best_model.predict_proba(user_encoded)[0]

    result = "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —É–π–¥–µ—Ç" if prediction == 1 else "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è"
    st.markdown(f"### –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**")

    proba_df = pd.DataFrame({"–ö–ª–∞—Å—Å": ["–û—Å—Ç–∞–Ω–µ—Ç—Å—è (0)", "–£–π–¥–µ—Ç (1)"], "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": proba})
    st.dataframe(proba_df.set_index("–ö–ª–∞—Å—Å"), use_container_width=True)
